plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

subprojects {
    group = 'com.ilkinmehdiyev'
    version = '0.0.1'

    apply plugin: 'java'
    
    apply plugin: 'maven-publish'

    java {
        sourceCompatibility = '17'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }
    // customized publishing


}
publishing {
    publications {
        customLibrary(MavenPublication) {
            groupId = 'com.baeldung.sample'
            artifactId = 'gradle-maven-converter'
            version = '0.0.1-maven'

            from components.java

            pom {
                name = 'Sample Library'
                description = 'A description of sample library'
                url = 'http://www.example.com/library'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }

            pom.withXml {
                asNode()
                .dependencies
                .dependency
                .findAll { dependency ->
                    // find all dependencies with runtime scope
                    dependency.scope.text() == 'runtime'
                }
                .each { dependency ->
                    // set the scope to 'compile'
                    dependency.scope*.value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'sampleRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}
if (project == rootProject) {
    tasks.named('bootJar').configure {
        enabled = false
    }

    tasks.named('compileJava').configure {
        enabled = false
    }
}